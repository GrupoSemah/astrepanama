---
interface Props {
  images: string[];
  id?: string;
  class?: string;
}

const { images = [], id = "image-carousel", class: className = "" } = Astro.props;
---

<div id={id} class={`carousel-container relative overflow-hidden rounded-2xl ${className}`}>
  <div class="carousel-track flex transition-transform duration-300 ease-out">
    {images.map((image, index) => (
      <div class="carousel-slide min-w-full flex-shrink-0">
        <img 
          src={image} 
          alt={`Slide ${index + 1}`} 
          class="w-full h-full object-cover" 
        />
      </div>
    ))}
  </div>
  
  <!-- Controles de navegación para desktop -->
  <div class="hidden md:block">
    <button 
      class="carousel-prev absolute left-4 top-1/2 -translate-y-1/2 w-10 h-10 bg-white rounded-full flex items-center justify-center focus:outline-none"
      aria-label="Anterior imagen"
    >
      <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M15 18L9 12L15 6" stroke="#1D3557" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
      </svg>
    </button>
    <button 
      class="carousel-next absolute right-4 top-1/2 -translate-y-1/2 w-10 h-10 bg-white rounded-full flex items-center justify-center focus:outline-none"
      aria-label="Siguiente imagen"
    >
      <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M9 6L15 12L9 18" stroke="#1D3557" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
      </svg>
    </button>
  </div>

  <!-- Indicadores de posición -->
  <div class="absolute bottom-4 left-0 right-0 flex justify-center gap-2">
    {images.map((_, index) => (
      <button 
        class="carousel-dot w-2 h-2 rounded-full bg-white opacity-50 focus:outline-none" 
        data-index={index}
        aria-label={`Ir a imagen ${index + 1}`}
      ></button>
    ))}
  </div>
</div>

<script>
  class Carousel {
    container: HTMLElement;
    track: HTMLElement;
    slides: HTMLElement[];
    dots: HTMLElement[];
    prevBtn: HTMLButtonElement | null;
    nextBtn: HTMLButtonElement | null;
    currentIndex: number = 0;
    slideWidth: number = 0;
    touchStartX: number = 0;
    touchEndX: number = 0;
    isSwiping: boolean = false;
    
    constructor(container: HTMLElement) {
      this.container = container;
      this.track = container.querySelector('.carousel-track') as HTMLElement;
      this.slides = Array.from(container.querySelectorAll('.carousel-slide'));
      this.dots = Array.from(container.querySelectorAll('.carousel-dot'));
      this.prevBtn = container.querySelector('.carousel-prev');
      this.nextBtn = container.querySelector('.carousel-next');
      
      this.init();
    }
    
    init() {
      if (this.slides.length <= 1) return;
      
      // Inicializar tamaño y posición
      this.updateSlideWidth();
      this.updateActiveDot();
      
      // Configurar event listeners
      window.addEventListener('resize', this.updateSlideWidth.bind(this));
      
      this.prevBtn?.addEventListener('click', this.prev.bind(this));
      this.nextBtn?.addEventListener('click', this.next.bind(this));
      
      this.dots.forEach((dot, index) => {
        dot.addEventListener('click', () => this.goToSlide(index));
      });
      
      // Touch events para mobile
      this.container.addEventListener('touchstart', this.handleTouchStart.bind(this), { passive: true });
      this.container.addEventListener('touchmove', this.handleTouchMove.bind(this), { passive: false });
      this.container.addEventListener('touchend', this.handleTouchEnd.bind(this));
    }
    
    updateSlideWidth() {
      this.slideWidth = this.container.offsetWidth;
      this.slides.forEach(slide => {
        slide.style.width = `${this.slideWidth}px`;
      });
      this.goToSlide(this.currentIndex, false);
    }
    
    updateActiveDot() {
      this.dots.forEach((dot, index) => {
        if (index === this.currentIndex) {
          dot.classList.add('opacity-100');
          dot.classList.remove('opacity-50');
        } else {
          dot.classList.add('opacity-50');
          dot.classList.remove('opacity-100');
        }
      });
    }
    
    goToSlide(index: number, animate: boolean = true) {
      if (index < 0) {
        index = this.slides.length - 1;
      } else if (index >= this.slides.length) {
        index = 0;
      }
      
      this.currentIndex = index;
      const translateX = -index * this.slideWidth;
      
      if (animate) {
        this.track.classList.add('transition-transform');
      } else {
        this.track.classList.remove('transition-transform');
      }
      
      this.track.style.transform = `translateX(${translateX}px)`;
      this.updateActiveDot();
      
      // Re-añadir la transición después de un cambio sin animación
      if (!animate) {
        setTimeout(() => {
          this.track.classList.add('transition-transform');
        }, 10);
      }
    }
    
    next() {
      const oldIndex = this.currentIndex;
      this.goToSlide(this.currentIndex + 1);
      
      // Solo disparar evento si realmente cambió el índice
      if (oldIndex !== this.currentIndex) {
        const event = new CustomEvent('carousel-slide-changed', {
          bubbles: true,
          detail: { direction: 'next', index: this.currentIndex }
        });
        this.container.dispatchEvent(event);
      }
    }
    
    prev() {
      const oldIndex = this.currentIndex;
      this.goToSlide(this.currentIndex - 1);
      
      // Solo disparar evento si realmente cambió el índice
      if (oldIndex !== this.currentIndex) {
        const event = new CustomEvent('carousel-slide-changed', {
          bubbles: true,
          detail: { direction: 'prev', index: this.currentIndex }
        });
        this.container.dispatchEvent(event);
      }
    }
    
    handleTouchStart(e: TouchEvent) {
      this.touchStartX = e.touches[0].clientX;
      this.isSwiping = true;
      this.track.classList.remove('transition-transform');
    }
    
    handleTouchMove(e: TouchEvent) {
      if (!this.isSwiping) return;
      
      e.preventDefault();
      this.touchEndX = e.touches[0].clientX;
      const diffX = this.touchEndX - this.touchStartX;
      const translateX = -this.currentIndex * this.slideWidth + diffX;
      
      // Limitar la cantidad de arrastre para que no parezca demasiado elástico
      if (
        (this.currentIndex === 0 && diffX > 0) || 
        (this.currentIndex === this.slides.length - 1 && diffX < 0)
      ) {
        this.track.style.transform = `translateX(${translateX / 3}px)`;
      } else {
        this.track.style.transform = `translateX(${translateX}px)`;
      }
    }
    
    handleTouchEnd() {
      if (!this.isSwiping) return;
      
      this.isSwiping = false;
      this.track.classList.add('transition-transform');
      
      const diffX = this.touchEndX - this.touchStartX;
      const threshold = this.slideWidth / 3; // Requiere arrastrar 1/3 del ancho para cambiar slide
      
      if (Math.abs(diffX) > threshold) {
        if (diffX > 0) {
          this.prev();
          // Disparar evento personalizado de cambio a slide previo
          const prevEvent = new CustomEvent('carousel-slide-changed', {
            bubbles: true,
            detail: { direction: 'prev', index: this.currentIndex }
          });
          this.container.dispatchEvent(prevEvent);
        } else {
          this.next();
          // Disparar evento personalizado de cambio a siguiente slide
          const nextEvent = new CustomEvent('carousel-slide-changed', {
            bubbles: true,
            detail: { direction: 'next', index: this.currentIndex }
          });
          this.container.dispatchEvent(nextEvent);
        }
      } else {
        // No hubo cambio de slide, se regresa al mismo
        this.goToSlide(this.currentIndex);
      }
    }
  }
  
  // Inicializar todos los carouseles en la página
  document.addEventListener('DOMContentLoaded', () => {
    const carousels = document.querySelectorAll('.carousel-container');
    carousels.forEach(carousel => {
      new Carousel(carousel as HTMLElement);
    });
  });
</script>

<style>
  .carousel-container {
    touch-action: pan-y;
  }
  
  .carousel-dot.opacity-100 {
    width: 8px;
    height: 8px;
  }
</style>
