---
interface Props {
  images: string[];
  id?: string;
  class?: string;
  showDragIndicator?: boolean;
  useNavDots?: boolean;
  useNavArrows?: boolean;
}

const { 
  images = [], 
  id = "image-carousel", 
  class: className = "", 
  showDragIndicator = false, 
  useNavDots = false,
  useNavArrows = false
} = Astro.props;
---

<div class="carousel-wrapper">
  <div id={id} class={`carousel-container relative overflow-hidden rounded-2xl ${className} ${showDragIndicator ? 'cursor-none' : ''}`}>
    {showDragIndicator && (
      <div class="drag-indicator absolute inset-0 flex items-center justify-center pointer-events-none">
        <span class="text-white text-lg tracking-widest font-medium">DRAG</span>
      </div>
    )}
    <div class="carousel-track flex transition-transform duration-300 ease-out">
      {images.map((image, index) => (
        <div class="carousel-slide min-w-full flex-shrink-0 relative">
          <img 
            src={image} 
            alt={`Slide ${index + 1}`} 
            class="w-full h-full object-cover" 
          />
        </div>
      ))}
    </div>
  </div>
  
  <!-- Navegación con flechas fuera del carrusel -->
  {useNavArrows && (
    <div class="carousel-navigation mt-4 flex justify-center gap-6">
      <button 
        class="carousel-prev-bottom w-10 h-10 bg-white rounded-full flex items-center justify-center focus:outline-none shadow-md hover:bg-gray-100 transition-all duration-200"
        aria-label="Anterior imagen"
      >
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M15 18L9 12L15 6" stroke="#1D3557" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
      </button>
      <button 
        class="carousel-next-bottom w-10 h-10 bg-white rounded-full flex items-center justify-center focus:outline-none shadow-md hover:bg-gray-100 transition-all duration-200"
        aria-label="Siguiente imagen"
      >
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M9 6L15 12L9 18" stroke="#1D3557" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
      </button>
    </div>
  )}
</div>

<script>
  // Almacenar todas las instancias de carousel
  const carouselInstances = new Map<HTMLElement, Carousel>();
  
  class Carousel {
    container: HTMLElement;
    wrapper: HTMLElement | null;
    track: HTMLElement;
    slides: HTMLElement[];
    prevBtn: HTMLElement | null;
    nextBtn: HTMLElement | null;
    prevBtnBottom: HTMLElement | null;
    nextBtnBottom: HTMLElement | null;
    currentIndex: number = 0;
    slideWidth: number = 0;
    touchStartX: number = 0;
    touchEndX: number = 0;
    isSwiping: boolean = false;
    
    // Variables para arrastrar con mouse
    mouseStartX: number = 0;
    mouseEndX: number = 0;
    isDragging: boolean = false;
    
    constructor(container: HTMLElement) {
      this.container = container;
      // Buscar el wrapper padre
      this.wrapper = container.closest('.carousel-wrapper');
      this.track = container.querySelector('.carousel-track') as HTMLElement;
      this.slides = Array.from(container.querySelectorAll('.carousel-slide'));
      
      // Botones de navegación laterales (dentro del carousel)
      this.prevBtn = container.querySelector('.carousel-prev');
      this.nextBtn = container.querySelector('.carousel-next');
      
      // Botones de navegación inferiores (fuera del carousel, en el wrapper)
      this.prevBtnBottom = this.wrapper ? this.wrapper.querySelector('.carousel-prev-bottom') : null;
      this.nextBtnBottom = this.wrapper ? this.wrapper.querySelector('.carousel-next-bottom') : null;
      
      // Guardar la instancia en el mapa global
      carouselInstances.set(container, this);
      
      this.init();
    }
    
    init() {
      if (this.slides.length <= 1) return;
      
      // Inicializar tamaño y posición
      this.updateSlideWidth();
      
      // Configurar event listeners
      window.addEventListener('resize', this.updateSlideWidth.bind(this));
      
      // Botones de navegación normales (laterales)
      this.prevBtn?.addEventListener('click', this.prev.bind(this));
      this.nextBtn?.addEventListener('click', this.next.bind(this));
      
      // Botones de navegación en la parte inferior (flechas que reemplazan los puntos)
      this.prevBtnBottom?.addEventListener('click', this.prev.bind(this));
      this.nextBtnBottom?.addEventListener('click', this.next.bind(this));
      
      // Touch events para mobile
      this.container.addEventListener('touchstart', this.handleTouchStart.bind(this), { passive: true });
      this.container.addEventListener('touchmove', this.handleTouchMove.bind(this), { passive: false });
      this.container.addEventListener('touchend', this.handleTouchEnd.bind(this));
      
      // Mouse events para desktop
      this.container.addEventListener('mousedown', this.handleMouseDown.bind(this));
      document.addEventListener('mousemove', this.handleMouseMove.bind(this));
      document.addEventListener('mouseup', this.handleMouseUp.bind(this));
    }
    
    updateSlideWidth() {
      this.slideWidth = this.container.offsetWidth;
      this.slides.forEach(slide => {
        (slide as HTMLElement).style.width = `${this.slideWidth}px`;
      });
      this.moveToSlide(this.currentIndex, false);
    }
    
    moveToSlide(index: number, animate: boolean = true) {
      if (!animate) {
        this.track.classList.remove('transition-transform');
      } else {
        this.track.classList.add('transition-transform');
      }
      
      const offset = index * this.slideWidth;
      this.track.style.transform = `translateX(-${offset}px)`;
      
      // Actualizar estado
      this.currentIndex = index;
      
      // Actualizar indicadores externos asociados a este carousel
      this.updateExternalIndicators();
      
      // Disparar eventos personalizados para sincronización
      const events = [
        new CustomEvent('slide-changed', { 
          detail: {
            index: this.currentIndex,
            container: this.container,
            slide: this.slides[this.currentIndex]
          }
        }),
        new CustomEvent('carousel-slide-changed', { 
          detail: {
            index: this.currentIndex
          }
        })
      ];
      
      // Disparar ambos eventos para garantizar compatibilidad
      events.forEach(event => {
        this.container.dispatchEvent(event);
      });
    }
    
    updateExternalIndicators() {
      // Buscar la sección que contiene este carousel
      const section = this.container.closest('section');
      if (!section) return;
      
      // Buscar indicadores externos en la misma sección
      const externalIndicators = section.querySelectorAll('.carousel-indicator');
      if (externalIndicators.length > 0) {
        externalIndicators.forEach((indicator, idx) => {
          if (idx === this.currentIndex) {
            indicator.classList.add('bg-primary');
          } else {
            indicator.classList.remove('bg-primary');
          }
        });
      }
    }
    
    goToSlide(index: number) {
      // Asegurarse de que el índice sea válido
      const targetIndex = Math.max(0, Math.min(index, this.slides.length - 1));
      this.moveToSlide(targetIndex);
    }
    
    prev() {
      let targetIndex = this.currentIndex - 1;
      if (targetIndex < 0) {
        targetIndex = this.slides.length - 1;
      }
      this.goToSlide(targetIndex);
    }
    
    next() {
      let targetIndex = this.currentIndex + 1;
      if (targetIndex >= this.slides.length) {
        targetIndex = 0;
      }
      this.goToSlide(targetIndex);
    }
    
    handleTouchStart(e: TouchEvent) {
      this.touchStartX = e.touches[0].clientX;
      this.touchEndX = e.touches[0].clientX; // Inicializar touchEndX
      this.isSwiping = true;
      this.track.classList.remove('transition-transform');
    }
    
    handleTouchMove(e: TouchEvent) {
      if (!this.isSwiping) return;
      
      const touchCurrentX = e.touches[0].clientX;
      // Actualizar touchEndX durante el movimiento
      this.touchEndX = touchCurrentX;
      
      const diff = this.touchStartX - touchCurrentX;
      
      const currentOffset = this.currentIndex * this.slideWidth;
      const newOffset = currentOffset + diff;
      
      // Limitar el arrastre si estamos en el primer o último slide
      if (this.currentIndex === 0 && diff < 0) {
        this.track.style.transform = `translateX(-${newOffset * 0.3}px)`;
      } else if (this.currentIndex === this.slides.length - 1 && diff > 0) {
        this.track.style.transform = `translateX(-${currentOffset + diff * 0.3}px)`;
      } else {
        this.track.style.transform = `translateX(-${newOffset}px)`;
      }
      
      // Prevenir scroll
      e.preventDefault();
    }
    
    handleTouchEnd() {
      if (!this.isSwiping) return;
      
      this.isSwiping = false;
      this.track.classList.add('transition-transform');
      
      const touchDiff = this.touchStartX - this.touchEndX;
      
      // Si el arrastre es suficiente, cambiar slide
      if (Math.abs(touchDiff) > this.slideWidth * 0.2) {
        if (touchDiff > 0) {
          this.next();
        } else {
          this.prev();
        }
      } else {
        // Restaurar posición original
        this.moveToSlide(this.currentIndex);
      }
    }
    
    handleMouseDown(e: MouseEvent) {
      this.isDragging = true;
      this.mouseStartX = e.clientX;
      this.mouseEndX = e.clientX;
      
      // Eliminar transición para un arrastre suave
      this.track.classList.remove('transition-transform');
      
      // Cambiar cursor mientras se arrastra
      document.body.style.cursor = 'grabbing';
      e.preventDefault();
    }
    
    handleMouseMove(e: MouseEvent) {
      if (!this.isDragging) return;
      
      this.mouseEndX = e.clientX;
      const diff = this.mouseStartX - this.mouseEndX;
      
      const currentOffset = this.currentIndex * this.slideWidth;
      const newOffset = currentOffset + diff;
      
      // Limitar el arrastre si estamos en el primer o último slide
      if (this.currentIndex === 0 && diff < 0) {
        this.track.style.transform = `translateX(-${newOffset * 0.3}px)`;
      } else if (this.currentIndex === this.slides.length - 1 && diff > 0) {
        this.track.style.transform = `translateX(-${currentOffset + diff * 0.3}px)`;
      } else {
        this.track.style.transform = `translateX(-${newOffset}px)`;
      }
      
      // Prevenir selección de texto mientras se arrastra
      e.preventDefault();
    }
    
    handleMouseUp(e: MouseEvent) {
      if (!this.isDragging) return;
      
      this.isDragging = false;
      this.track.classList.add('transition-transform');
      document.body.style.cursor = '';
      
      const dragDiff = this.mouseStartX - this.mouseEndX;
      
      // Si el arrastre es suficiente, cambiar slide
      if (Math.abs(dragDiff) > this.slideWidth * 0.2) {
        if (dragDiff > 0) {
          this.next();
        } else {
          this.prev();
        }
      } else {
        // Restaurar posición original
        this.moveToSlide(this.currentIndex);
      }
    }
  }
  
  // Inicializar todos los carouseles en la página
  document.addEventListener('DOMContentLoaded', () => {
    const carouselElements = document.querySelectorAll('.carousel-container');
    
    // Crear instancias y guardar referencias
    carouselElements.forEach(carousel => {
      const carouselInstance = new Carousel(carousel as HTMLElement);
      
      // Añadir referencia directa al elemento HTML para que pueda ser accedido externamente
      (carousel as any).carouselInstance = carouselInstance;
      
      // Manejar el indicador DRAG si está habilitado
      if (carousel.classList.contains('cursor-none')) {
        // Ocultar el cursor nativo
        (carousel as HTMLElement).style.cursor = 'none';
        
        // Encontrar el indicador DRAG existente
        const dragIndicator = carousel.querySelector('.drag-indicator');
        
        if (dragIndicator) {
          // Funciones para manejar la visibilidad del indicador
          const showDragIndicator = () => {
            // Mostrar el indicador con una animación suave
            dragIndicator.classList.add('opacity-100');
            dragIndicator.classList.remove('opacity-0');
          };
          
          const hideDragIndicator = () => {
            // Ocultar el indicador con una animación suave
            dragIndicator.classList.remove('opacity-100');
            dragIndicator.classList.add('opacity-0');
          };
          
          // Inicialmente ocultar
          hideDragIndicator();
          
          // Agregar listeners de eventos
          carousel.addEventListener('mouseenter', showDragIndicator);
          carousel.addEventListener('mouseleave', hideDragIndicator);
          
          // Cuando se empieza a arrastrar, ocultar temporalmente
          carousel.addEventListener('mousedown', () => {
            hideDragIndicator();
          });
          
          // Cuando se suelta, mostrar nuevamente
          carousel.addEventListener('mouseup', () => {
            showDragIndicator();
          });
          
          // Al salir del documento mientras arrastra
          document.addEventListener('mouseup', () => {
            if (document.activeElement === carousel || carousel.contains(document.activeElement)) {
              showDragIndicator();
            }
          });
        }
      }
      
      // Listener para eventos de navegación externa
      carousel.addEventListener('carousel-goto-slide', (e: Event) => {
        const customEvent = e as CustomEvent;
        if (customEvent.detail && typeof customEvent.detail.index === 'number') {
          carouselInstance.goToSlide(customEvent.detail.index);
        }
      });
    });
    
    // Conectar los indicadores de carousel externos
    document.querySelectorAll('.carousel-indicator').forEach((indicator, index) => {
      indicator.addEventListener('click', () => {
        // Busca el carousel en la misma sección que el indicador
        const section = indicator.closest('section');
        if (!section) return;
        
        const carouselContainer = section.querySelector('.carousel-container');
        if (carouselContainer) {
          const carouselInstance = carouselInstances.get(carouselContainer as HTMLElement);
          if (carouselInstance) {
            carouselInstance.goToSlide(index);
          }
        }
      });
    });
  });
</script>

<style>
  .carousel-container {
    touch-action: pan-y;
  }
  
  .drag-indicator {
    opacity: 0;
    transition: opacity 0.3s ease-in-out;
    background-color: transparent;
    backdrop-filter: blur(10px);
  }
  
  .carousel-dot.opacity-100 {
    width: 8px;
    height: 8px;
  }
  
  /* Estilos para la navegación fuera del carousel */
  .carousel-navigation {
    padding-top: 16px;
    margin-top: 0;
  }
  
  /* Ajustar estilos de los botones de navegación */
  .carousel-navigation button {
    border: 1px solid #E9E9E9;
    transition: all 0.2s ease;
  }
  
  .carousel-navigation button:hover {
    background-color: #f0f0f0;
    transform: scale(1.05);
  }
</style>
