---
interface Props {
  isMenuOpen?: boolean;
}

const { isMenuOpen = false } = Astro.props;
---

<header class="w-full fixed top-0 left-0 z-50 bg-primary text-white h-16 md:h-20 flex items-center justify-between px-4 md:px-8">
  <div class="logo">
    <a href="/" class="flex items-center">
      <img src="/icons/svg/logoastre.svg" alt="Astre Logo" height="28" class="h-7 md:h-8" />
    </a>
  </div>
  
  <div class="hidden md:flex items-center space-x-8 absolute left-1/2 transform -translate-x-1/2">
    <a href="#diseno" class="nav-link relative" data-section="diseno">Diseño</a>
    <a href="#apartamentos" class="nav-link relative" data-section="apartamentos">Apartamentos</a>
    <a href="#amenidades" class="nav-link relative" data-section="amenidades">Amenidades</a>
    <a href="#ubicacion" class="nav-link relative" data-section="ubicacion">Ubicación</a>
  </div>
  
  <div class="hidden md:block">
    <a href="#contacto" class="text-white font-medium py-1 px-4 border border-white rounded-md hover:bg-white hover:text-primary transition-colors">Contacto</a>
  </div>
  
  <button id="menuToggle" class="menu-toggle focus:outline-none md:hidden" aria-label="Toggle Menu">
    <img src="/icons/svg/menu-item.svg" alt="Menu" width="52" height="52" />
  </button>
</header>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const menuToggle = document.getElementById('menuToggle');
    
    menuToggle?.addEventListener('click', () => {
      const event = new CustomEvent('toggle-menu');
      document.dispatchEvent(event);
    });
    
    const navLinks = document.querySelectorAll<HTMLAnchorElement>('header a[href^="#"]');
    const sectionElements: HTMLElement[] = [];
    
    navLinks.forEach(link => {
      const targetId = link.getAttribute('href')?.substring(1) || '';
      const section = document.getElementById(targetId);
      if (section) {
        sectionElements.push(section);
      }
      
      link.addEventListener('click', (e) => {
        e.preventDefault();
        
        if (!targetId) return;
        
        const targetElement = document.getElementById(targetId);
        if (!targetElement) return;
        
        const navbar = document.querySelector('header');
        const navbarHeight = navbar ? navbar.offsetHeight : 0;
        
        const targetPosition = targetElement.getBoundingClientRect().top + window.scrollY - navbarHeight;
        
        window.scrollTo({
          top: targetPosition,
          behavior: 'smooth'
        });
      });
    });
    
    function updateActiveLink(): void {
      const scrollPosition = window.scrollY;
      const navbar = document.querySelector('header');
      const navbarHeight = navbar ? navbar.offsetHeight : 0;
      
      sectionElements.forEach(section => {
        const sectionTop = section.offsetTop - navbarHeight - 10;
        const sectionHeight = section.offsetHeight;
        const sectionId = section.getAttribute('id') || '';
        
        if (scrollPosition >= sectionTop && scrollPosition < sectionTop + sectionHeight) {
          navLinks.forEach(link => {
            link.classList.remove('active');
            if (link.getAttribute('href') === `#${sectionId}`) {
              link.classList.add('active');
            }
          });
        }
      });
    }
    
    window.addEventListener('scroll', updateActiveLink);
    
    // Llamar a la función una vez para establecer el estado inicial
    updateActiveLink();
  });
</script>

<style>
  .menu-toggle {
    background: transparent;
    border: none;
    cursor: pointer;
  }
  
  .nav-link {
    transition: all 0.3s ease;
    padding: 0.25rem 0;
  }
  
  .nav-link:hover,
  .nav-link.active {
    transform: scale(1.05);
    font-weight: 600;
  }
  
  .nav-link::after {
    content: '';
    position: absolute;
    bottom: -2px;
    left: 0;
    width: 0;
    height: 2px;
    background-color: #ffffff;
    transition: width 0.3s;
  }
  
  .nav-link:hover::after,
  .nav-link.active::after {
    width: 100%;
  }
</style>
