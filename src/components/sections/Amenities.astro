---
import { getImageUrl } from "@/services/cloudStorage";
import Carousel from "../ui/Carousel.astro";

interface Props {
  title?: string;
}

const { title = "Amenidades" } = Astro.props;

const amenidades = [
  {
    title: "Piscina",
    description: "Relájate con estilo, rodeado de paisajismo moderno",
    icon: "/icons/svg/pool.svg"
  },
  {
    title: "Sala de fiestas",
    description: "Ideal para celebraciones privadas y momentos especiales",
    icon: "/icons/svg/salon.svg"
  },
  {
    title: "Área infantil",
    description: "Un espacio seguro y divertido para los más pequeños",
    icon: "/icons/svg/areainfantil.svg"
  },
  {
    title: "Cancha de Basket",
    description: "Perfecto para liberar energía y mantenerte activo",
    icon: "/icons/svg/cancha.svg"
  },
  {
    title: "Gimnasio",
    description: "Equipado para entrenamientos funcionales y de fuerza",
    icon: "/icons/svg/gym.svg"
  },
  {
    title: "Game room",
    description: "Diversión para toda la familia sin salir de casa",
    icon: "/icons/svg/game.svg"
  }
];

const currentAmenity = amenidades[0];
const imageFolder = "AMENIDADES";
const imageNames = [
  "Amenidades_imagenes-01.webp",
  "Amenidades_imagenes-02.webp",
  "Amenidades_imagenes-03.webp",
  "Amenidades_imagenes-04.webp",
  "Amenidades_imagenes-05.webp",
  "Amenidades_imagenes-06.webp"
];

const poolImages = imageNames.map(name => getImageUrl(name, imageFolder));
---

<section
  id="amenidades"
  class="md:min-h-screen w-full flex items-center justify-center bg-white md:py-24"
>
  <!-- Versión Móvil -->
  <div class="w-full md:hidden min-h-[90vh] flex flex-col justify-between py-8">
    <div class="container mx-auto px-4 flex-grow flex flex-col">
      <!-- Ícono, Título y descripción centrados -->
      <div class="text-center mb-4">
        <div class="flex justify-center mb-4">
          <img
            src={currentAmenity.icon}
            alt={`Icono de ${currentAmenity.title}`}
            class="w-22 h-22 transition-all duration-500 ease-in-out"
            id="amenity-icon-mobile"
          />
        </div>
        <h2
          class="text-5xl font-bold text-[#222222] mb-2 transition-all duration-500 ease-in-out" 
          id="amenity-title-mobile"
          style="font-family: var(--font-heading);"
        >
          {currentAmenity.title}
        </h2>
        <p
          class="text-xl text-[#222222] opacity-80 transition-all duration-500 ease-in-out"
          id="amenity-description-mobile"
          style="font-family: var(--font-body);"
        >
          {currentAmenity.description}
        </p>
      </div>

      <!-- Carousel con imágenes -->
      <div class="flex-grow mb-4 flex flex-col justify-center">
        <div class="relative">
          <Carousel
            images={poolImages}
            id="pool-carousel-mobile"
            class="rounded-3xl overflow-hidden aspect-[16/10]"
          />
        </div>

        <!-- Botones personalizados para móvil (posición inferior) -->
        <div class="custom-carousel-controls flex justify-center mt-4 gap-6">
          <button
            class="custom-prev-btn w-12 h-12 rounded-full border-2 border-primary flex items-center justify-center hover:bg-gray-100 transition-colors"
            aria-label="Anterior imagen"
            onclick="document.querySelector('#pool-carousel-mobile .carousel-prev').click()"
          >
            <svg
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M15 18L9 12L15 6"
                stroke="#222222"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"></path>
            </svg>
          </button>
          <button
            class="custom-next-btn w-12 h-12 rounded-full border-2 border-primary flex items-center justify-center hover:bg-gray-100 transition-colors"
            aria-label="Siguiente imagen"
            onclick="document.querySelector('#pool-carousel-mobile .carousel-next').click()"
          >
            <svg
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M9 6L15 12L9 18"
                stroke="#222222"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"></path>
            </svg>
          </button>
        </div>
      </div>
    </div>
  </div>

  <div class="hidden md:block w-full">
    <div class="container mx-auto px-8">
      <div class="grid grid-cols-2 gap-20 place-content-center">
        <div>
          <div class="flex justify-center mb-6">
            <img
              src={currentAmenity.icon}
              alt={`Icono de ${currentAmenity.title}`}
              class="w-32 h-32 transition-all duration-500 ease-in-out"
              id="amenity-icon-desktop"
            />
          </div>

          <!-- Título y descripción -->
          <h2
            class="text-6xl text-center font-bold text-primary mb-3 transition-all duration-500 ease-in-out"
            style="font-family: var(--font-heading);"
            id="amenity-title-desktop"
          >
            {currentAmenity.title}
          </h2>
          <p
            class="text-xl text-center text-primary opacity-80 mb-8 max-w-lg transition-all duration-500 ease-in-out"
            style="font-family: var(--font-body);"
            id="amenity-description-desktop"
          >
            {currentAmenity.description}
          </p>
        </div>

        <!-- Columna derecha con carousel -->
        <div class="relative">
          <Carousel
            images={poolImages}
            id="pool-carousel-desktop"
            class="rounded-3xl overflow-hidden aspect-[16/10]"
          />
        </div>
      </div>
    </div>

    <div class="flex justify-center mt-16 gap-16">
      <button
        class="custom-prev-btn w-12 h-12 rounded-full border-2 border-primary bg-white flex items-center justify-center shadow-md hover:bg-gray-100 transition-colors"
        aria-label="Anterior imagen"
        onclick="document.querySelector('#pool-carousel-desktop .carousel-prev').click()"
      >
        <svg
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M15 18L9 12L15 6"
            stroke="#222222"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"></path>
        </svg>
      </button>
      <button
        class="custom-next-btn w-12 h-12 rounded-full border-2 border-primary bg-white flex items-center justify-center shadow-md hover:bg-gray-100 transition-colors"
        aria-label="Siguiente imagen"
        onclick="document.querySelector('#pool-carousel-desktop .carousel-next').click()"
      >
        <svg
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M9 6L15 12L9 18"
            stroke="#222222"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"></path>
        </svg>
      </button>
    </div>
  </div>
</section>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const amenidades = [
      {
        title: "Piscina",
        description: "Relájate con estilo, rodeado de paisajismo moderno",
        icon: "/icons/svg/pool.svg"
      },
      {
        title: "Sala de fiestas",
        description: "Ideal para celebraciones privadas y momentos especiales",
        icon: "/icons/svg/salon.svg"
      },
      {
        title: "Área infantil",
        description: "Un espacio seguro y divertido para los más pequeños",
        icon: "/icons/svg/areainfantil.svg"
      },
      {
        title: "Cancha de Basket",
        description: "Perfecto para liberar energía y mantenerte activo",
        icon: "/icons/svg/cancha.svg"
      },
      {
        title: "Gimnasio",
        description: "Equipado para entrenamientos funcionales y de fuerza",
        icon: "/icons/svg/gym.svg"
      },
      {
        title: "Game room",
        description: "Diversión para toda la familia sin salir de casa",
        icon: "/icons/svg/game.svg"
      }
    ];

    let currentMobileIndex = 0;
    let currentDesktopIndex = 0;

    const titleMobile = document.getElementById('amenity-title-mobile');
    const descriptionMobile = document.getElementById('amenity-description-mobile');
    const iconMobile = document.getElementById('amenity-icon-mobile') as HTMLImageElement;
    
    const iconDesktop = document.getElementById('amenity-icon-desktop') as HTMLImageElement;
    const titleDesktop = document.getElementById('amenity-title-desktop');
    const descriptionDesktop = document.getElementById('amenity-description-desktop');

    const mobileControls = document.querySelector('.w-full.md\\:hidden .custom-carousel-controls');
    const desktopControls = document.querySelector('.hidden.md\\:block .flex.justify-center.mt-16.gap-16');
    
    const prevBtnMobile = mobileControls?.querySelector('.custom-prev-btn');
    const nextBtnMobile = mobileControls?.querySelector('.custom-next-btn');
    const prevBtnDesktop = desktopControls?.querySelector('.custom-prev-btn');
    const nextBtnDesktop = desktopControls?.querySelector('.custom-next-btn');
    
    const updateInfo = (index: number, isMobile: boolean): void => {
      if (index >= 0 && index < amenidades.length) {
        const amenidad = amenidades[index];
        
        if (isMobile) {
          currentMobileIndex = index;
        } else {
          currentDesktopIndex = index;
        }
        
        if (isMobile && titleMobile && descriptionMobile) {
          titleMobile.textContent = amenidad.title;
          descriptionMobile.textContent = amenidad.description;
          
          if (iconMobile) {
            iconMobile.src = amenidad.icon;
            iconMobile.alt = `Icono de ${amenidad.title}`;
          }
        }
        
        if (!isMobile && iconDesktop && titleDesktop && descriptionDesktop) {
          iconDesktop.src = amenidad.icon;
          iconDesktop.alt = `Icono de ${amenidad.title}`;
          titleDesktop.textContent = amenidad.title;
          descriptionDesktop.textContent = amenidad.description;
        }
      }
    };

    if (prevBtnMobile) {
      prevBtnMobile.addEventListener('click', () => {
        currentMobileIndex = (currentMobileIndex - 1 + amenidades.length) % amenidades.length;
        setTimeout(() => updateInfo(currentMobileIndex, true), 50);
      });
    }
    
    if (nextBtnMobile) {
      nextBtnMobile.addEventListener('click', () => {
        currentMobileIndex = (currentMobileIndex + 1) % amenidades.length;
        setTimeout(() => updateInfo(currentMobileIndex, true), 50);
      });
    }
    
    if (prevBtnDesktop) {
      prevBtnDesktop.addEventListener('click', () => {
        currentDesktopIndex = (currentDesktopIndex - 1 + amenidades.length) % amenidades.length;
        setTimeout(() => updateInfo(currentDesktopIndex, false), 50);
      });
    }
    
    if (nextBtnDesktop) {
      nextBtnDesktop.addEventListener('click', () => {
        currentDesktopIndex = (currentDesktopIndex + 1) % amenidades.length;
        setTimeout(() => updateInfo(currentDesktopIndex, false), 50);
      });
    }

    const carouselMobile = document.getElementById('pool-carousel-mobile');
    if (carouselMobile) {
      // Escuchar al nuevo evento personalizado para cambios de slide
      carouselMobile.addEventListener('carousel-slide-changed', ((e: CustomEvent) => {
        const { direction, index } = e.detail;
        // Actualizar la información basada en el índice real del carousel
        currentMobileIndex = index;
        updateInfo(currentMobileIndex, true);
      }) as EventListener);
    }

    const carouselDesktop = document.getElementById('pool-carousel-desktop');
    if (carouselDesktop) {
      // Escuchar al nuevo evento personalizado para cambios de slide
      carouselDesktop.addEventListener('carousel-slide-changed', ((e: CustomEvent) => {
        const { direction, index } = e.detail;
        // Actualizar la información basada en el índice real del carousel
        currentDesktopIndex = index;
        updateInfo(currentDesktopIndex, false);
      }) as EventListener);
    }
  });
</script>

<style>
  /* Ocultar los botones originales del carousel */
  :global(#pool-carousel-mobile .carousel-prev),
  :global(#pool-carousel-mobile .carousel-next),
  :global(#pool-carousel-desktop .carousel-prev),
  :global(#pool-carousel-desktop .carousel-next) {
    display: none !important;
  }

  /* Ocultar los indicadores de posición (dots) */
  :global(.carousel-container .carousel-dot) {
    display: none !important;
  }
</style>
