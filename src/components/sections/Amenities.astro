---
import { getImageUrl } from "@/services/cloudStorage";
import Carousel from "../ui/Carousel.astro";

interface Props {
  title?: string;
}

const { title = "Amenidades" } = Astro.props;

const amenidades = [
  {
    title: "Piscina",
    description: "Relájate con estilo, rodeado de paisajismo moderno",
    icon: "/icons/svg/pool.svg"
  },
  {
    title: "Sala de fiestas",
    description: "Ideal para celebraciones privadas y momentos especiales",
    icon: "/icons/svg/salon.svg"
  },
  {
    title: "Área infantil",
    description: "Un espacio seguro y divertido para los más pequeños",
    icon: "/icons/svg/areainfantil.svg"
  },
  {
    title: "Cancha de Basket",
    description: "Perfecto para liberar energía y mantenerte activo",
    icon: "/icons/svg/cancha.svg"
  },
  {
    title: "Gimnasio",
    description: "Equipado para entrenamientos funcionales y de fuerza",
    icon: "/icons/svg/gym.svg"
  },
  {
    title: "Game room",
    description: "Diversión para toda la familia sin salir de casa",
    icon: "/icons/svg/game.svg"
  }
];

const currentAmenity = amenidades[0];
const imageFolder = "AMENIDADES";
const imageNames = [
  "Amenidades_imagenes-01.webp",
  "Amenidades_imagenes-02.webp",
  "Amenidades_imagenes-03.webp",
  "Amenidades_imagenes-04.webp",
  "Amenidades_imagenes-05.webp",
  "Amenidades_imagenes-06.webp"
];

const poolImages = imageNames.map(name => getImageUrl(name, imageFolder));
---

<section
  id="amenidades"
  class="md:min-h-screen w-full flex flex-col items-center justify-center bg-white md:py-24"
>
  <div class="text-center mb-14 md:mb-16">
    <h2 class="text-4xl md:text-5xl text-primary mb-4" style="font-family: var(--font-heading); font-weight: var(--font-heading-weight);">
      Comodidades que transforman tu rutina
    </h2>
    <p class="text-base md:text-lg text-primary opacity-90 max-w-3xl mx-auto" style="font-family: var(--font-body); font-weight: var(--font-body-weight);">
      PH Astre ofrece una selección de amenidades diseñadas para tu bienestar, recreación y estilo de vida activo.
    </p>
  </div>

  <!-- Versión Móvil -->
  <div class="w-full md:hidden min-h-[90vh] flex flex-col justify-between py-8">
    <div class="container mx-auto px-4 flex-grow flex flex-col">
      <!-- Ícono, Título y descripción centrados -->
      <div class="text-center mb-4">
        <div class="flex justify-center mb-4 transform transition-all duration-500 rotate-x-0 perspective-500" id="amenity-icon-container-mobile">
          <img
            src={currentAmenity.icon}
            alt={`Icono de ${currentAmenity.title}`}
            class="w-22 h-22"
            id="amenity-icon-mobile"
          />
        </div>
        <h2
          class="text-5xl text-primary mb-2 transform transition-all duration-500 rotate-x-0 perspective-500 whitespace-nowrap" 
          id="amenity-title-mobile"
          style="font-family: var(--font-heading); font-weight: var(--font-heading-weight);"
        >
          {currentAmenity.title}
        </h2>
        <p
          class="text-xl text-primary opacity-80 transform transition-all duration-500 rotate-x-0 perspective-500"
          id="amenity-description-mobile"
          style="font-family: var(--font-body); font-weight: var(--font-body-weight);"
        >
          {currentAmenity.description}
        </p>
      </div>

      <!-- Carousel con imágenes -->
      <div class="flex-grow mb-4 flex flex-col justify-center">
        <div class="relative">
          <Carousel
            images={poolImages}
            id="pool-carousel-mobile"
            class="rounded-3xl overflow-hidden aspect-[16/10]"
            useNavArrows={true}
          />
        </div>

        <!-- Se eliminaron los puntos de navegación móvil -->
      </div>
    </div>
  </div>

  <div class="hidden md:block w-full">
    <div class="container mx-auto px-8">
      <div class="grid grid-cols-2 gap-20 place-content-center">
        <div>
          <div class="flex justify-center mb-6 transform transition-all duration-500 rotate-x-0 perspective-500" id="amenity-icon-container-desktop">
            <img
              src={currentAmenity.icon}
              alt={`Icono de ${currentAmenity.title}`}
              class="w-32 h-32"
              id="amenity-icon-desktop"
            />
          </div>

          <!-- Título y descripción -->
          <h2
            class="text-6xl text-center font-bold text-primary mb-3 transform transition-all duration-500 rotate-x-0 perspective-500 whitespace-nowrap"
            style="font-family: var(--font-heading);"
            id="amenity-title-desktop"
          >
            {currentAmenity.title}
          </h2>
          <p
            class="text-xl text-center text-primary opacity-80 mb-8 max-w-lg mx-auto transform transition-all duration-500 rotate-x-0 perspective-500"
            style="font-family: var(--font-body);"
            id="amenity-description-desktop"
          >
            {currentAmenity.description}
          </p>
        </div>

        <!-- Columna derecha con carousel -->
        <div class="relative">
          <Carousel
            images={poolImages}
            id="pool-carousel-desktop"
            class="rounded-3xl overflow-hidden aspect-[16/10]"
            useNavArrows={true}
          />
        </div>
      </div>
    </div>

    <!-- Se eliminaron los puntos de navegación desktop -->
  </div>
</section>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const amenidades = [
      {
        title: "Piscina",
        description: "Relájate con estilo, rodeado de paisajismo moderno",
        icon: "/icons/svg/pool.svg"
      },
      {
        title: "Sala de fiestas",
        description: "Ideal para celebraciones privadas y momentos especiales",
        icon: "/icons/svg/salon.svg"
      },
      {
        title: "Área infantil",
        description: "Un espacio seguro y divertido para los más pequeños",
        icon: "/icons/svg/areainfantil.svg"
      },
      {
        title: "Cancha de Basket",
        description: "Perfecto para liberar energía y mantenerte activo",
        icon: "/icons/svg/cancha.svg"
      },
      {
        title: "Gimnasio",
        description: "Equipado para entrenamientos funcionales y de fuerza",
        icon: "/icons/svg/gym.svg"
      },
      {
        title: "Game room",
        description: "Diversión para toda la familia sin salir de casa",
        icon: "/icons/svg/game.svg"
      }
    ];

    let currentMobileIndex = 0;
    let currentDesktopIndex = 0;

    const titleMobile = document.getElementById('amenity-title-mobile');
    const descriptionMobile = document.getElementById('amenity-description-mobile');
    const iconMobile = document.getElementById('amenity-icon-mobile') as HTMLImageElement;
    const iconContainerMobile = document.getElementById('amenity-icon-container-mobile');
    
    const iconDesktop = document.getElementById('amenity-icon-desktop') as HTMLImageElement;
    const titleDesktop = document.getElementById('amenity-title-desktop');
    const descriptionDesktop = document.getElementById('amenity-description-desktop');
    const iconContainerDesktop = document.getElementById('amenity-icon-container-desktop');
    
    // Función para animar la transición con flip vertical
    const animateTransition = (isMobile: boolean): void => {
      // Elementos a animar
      const iconContainer = isMobile ? iconContainerMobile : iconContainerDesktop;
      const title = isMobile ? titleMobile : titleDesktop;
      const description = isMobile ? descriptionMobile : descriptionDesktop;
      
      // Aplicar animación de flip saliendo (rotación en X)
      if (iconContainer) iconContainer.classList.add('rotate-x-90', 'opacity-50');
      if (title) title.classList.add('rotate-x-90', 'opacity-50');
      if (description) description.classList.add('rotate-x-90', 'opacity-50');
      
      // Esperar brevemente y aplicar la animación de entrada
      setTimeout(() => {
        if (iconContainer) {
          iconContainer.classList.remove('rotate-x-90', 'opacity-50');
          iconContainer.classList.add('rotate-x-0', 'opacity-100');
        }
        if (title) {
          title.classList.remove('rotate-x-90', 'opacity-50');
          title.classList.add('rotate-x-0', 'opacity-100');
        }
        if (description) {
          description.classList.remove('rotate-x-90', 'opacity-50');
          description.classList.add('rotate-x-0', 'opacity-100');
        }
      }, 300);
    };
    
    const updateInfo = (index: number, isMobile: boolean): void => {
      if (index >= 0 && index < amenidades.length) {
        const amenidad = amenidades[index];
        
        if (isMobile) {
          currentMobileIndex = index;
        } else {
          currentDesktopIndex = index;
        }
        
        // Animar la transición
        animateTransition(isMobile);
        
        setTimeout(() => {
          if (isMobile && titleMobile && descriptionMobile) {
            titleMobile.textContent = amenidad.title;
            descriptionMobile.textContent = amenidad.description;
            
            if (iconMobile) {
              iconMobile.src = amenidad.icon;
              iconMobile.alt = `Icono de ${amenidad.title}`;
            }
          }
          
          if (!isMobile && iconDesktop && titleDesktop && descriptionDesktop) {
            iconDesktop.src = amenidad.icon;
            iconDesktop.alt = `Icono de ${amenidad.title}`;
            titleDesktop.textContent = amenidad.title;
            descriptionDesktop.textContent = amenidad.description;
          }
        }, 150); // Tiempo para que se complete la animación de salida
      }
    };

    // Escuchar eventos del carousel para actualizar información
    const carouselMobile = document.getElementById('pool-carousel-mobile');
    if (carouselMobile) {
      // Escuchamos ambos eventos para mayor compatibilidad
      ['carousel-slide-changed', 'slide-changed'].forEach(eventName => {
        carouselMobile.addEventListener(eventName, ((e: Event) => {
          const customEvent = e as CustomEvent<{index: number}>;
          const index = customEvent.detail.index;
          if (currentMobileIndex !== index) {
            currentMobileIndex = index;
            updateInfo(currentMobileIndex, true);
          }
        }) as EventListener);
      });
    }

    const carouselDesktop = document.getElementById('pool-carousel-desktop');
    if (carouselDesktop) {
      ['carousel-slide-changed', 'slide-changed'].forEach(eventName => {
        carouselDesktop.addEventListener(eventName, ((e: Event) => {
          const customEvent = e as CustomEvent<{index: number}>;
          const index = customEvent.detail.index;
          if (currentDesktopIndex !== index) {
            currentDesktopIndex = index;
            updateInfo(currentDesktopIndex, false);
          }
        }) as EventListener);
      });
    }
  });
</script>

<style>
  /* Ocultar los botones originales del carousel */
  :global(#pool-carousel-mobile .carousel-prev),
  :global(#pool-carousel-mobile .carousel-next),
  :global(#pool-carousel-desktop .carousel-prev),
  :global(#pool-carousel-desktop .carousel-next) {
    display: none !important;
  }

  /* Ocultar los indicadores de posición (dots) */
  :global(.carousel-container .carousel-dot) {
    display: none !important;
  }

  :global(#amenities-section .carousel-slide) {
    overflow: hidden;
  }

  /* Estilos para animación flip */
  .perspective-500 {
    perspective: 500px;
    transform-style: preserve-3d;
    backface-visibility: hidden;
  }

  .rotate-x-0 {
    transform: rotateX(0deg);
  }

  .rotate-x-90 {
    transform: rotateX(90deg);
  }
</style>
