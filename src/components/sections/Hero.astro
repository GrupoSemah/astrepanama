---
import { getImageUrl, projectFiles } from '@/services/cloudStorage';

interface Props {
  title1?: string;
  title2?: string;
  subtitle?: string;
}

const { 
  title1 = "Vive en el corazón de",
  title2 = "San Francisco", 
  subtitle = "Céntrico, cómodo y estratégico."
} = Astro.props;

const heroImage = projectFiles.images.hero;
const heroFolder = "DISENO";
const imageUrl = getImageUrl(heroImage.id, heroFolder);

// URL del video de hero desde Google Cloud Storage
const videoId = "Astre%20(Hero%20Header).mp4";
const videoUrl = getImageUrl(videoId, "HERO");
---

<section class="relative flex items-start md:items-center justify-end md:justify-center w-full h-screen">
  <div class="absolute inset-0 z-10">
    <!-- Video con gradiente usando el color primario -->
    <div class="absolute inset-0 bg-primary/60 z-20"></div>
    <video
      class="absolute inset-0 w-full h-full object-cover"
      autoplay
      muted
      loop
      playsinline
      preload="auto"
      src={videoUrl}
      poster={imageUrl}
    ></video>
    
    <!-- Fallback para dispositivos móviles -->
    <img 
      src={imageUrl}
      alt="Astre Panama" 
      class="absolute inset-0 w-full h-full object-cover hidden video-fallback" 
    />
  </div>
  
  <div class="relative z-20 flex flex-col justify-end md:justify-center md:items-center h-screen w-full md:mt-72 pb-52">
    <div class="w-full md:max-w-3xl lg:max-w-4xl pl-5">
      <h1 
        class="text-6xl md:text-5xl lg:text-6xl text-white md:mb-0 leading-none text-left md:text-center"
        style="font-family: var(--font-heading); font-weight: var(--font-heading-weight);"
      >
        {title1}
      </h1>
      <h1 
        class="text-6xl md:text-5xl lg:text-6xl text-white mt-2 md:mt-[-0.1em] mb-3 md:mb-4 leading-none text-left md:text-center"
        style="font-family: var(--font-heading); font-weight: var(--font-heading-weight);"
      >
        {title2}
      </h1>
      
      <p 
        class="text-xl text-white text-left mt-[-0.3em] md:text-center"
        style="font-family: var(--font-body); font-weight: var(--font-body-weight);"
      >
        {subtitle}
      </p>
    </div>
  </div>
  
  <div class="absolute bottom-2 left-1/2 transform -translate-x-1/2 z-20">
    <div class="relative flex flex-col items-center">
        <a href="#diseno" class="flex flex-col items-center -mt-2 group hover:opacity-80 transition-opacity">
          <span class="text-lg text-secondary mb-1">scroll</span>
          <svg width="32" height="32" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="animate-bounce">
            <path d="M7 13L12 18L17 13" stroke="#ffffff" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
          </svg>
        </a>
    </div>
  </div>
</section>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Manejo de reproducción del video
    const video = document.querySelector('video');
    const fallbackImg = document.querySelector('.video-fallback');
    
    // Función para comprobar si el video puede reproducirse
    function checkVideoPlayback() {
      if (video && !video.paused && video.currentTime > 0 && !video.ended) {
        // El video se está reproduciendo
        
      } else {
        // El video no se reproduce, mostrar imagen de fallback
        if (fallbackImg) {
          fallbackImg.classList.remove('hidden');
        }
        if (video) {
          video.style.display = 'none';
        }
      }
    }
    
    // Intentar reproducir el video
    if (video) {
      const playPromise = video.play();
      
      if (playPromise !== undefined) {
        playPromise
          .then(() => {
            // Reproducción automática exitosa
            setTimeout(checkVideoPlayback, 1000);
          })
          .catch(error => {
            // Reproducción automática fallida
            console.error('Error reproduciendo video:', error);
            if (fallbackImg) {
              fallbackImg.classList.remove('hidden');
            }
            if (video) {
              video.style.display = 'none';
            }
          });
      }
    }
    
    // Manejo de scroll
    const scrollButton = document.querySelector('a[href="#diseno"]');
    scrollButton?.addEventListener('click', (e) => {
      e.preventDefault();
      
      const targetElement = document.getElementById('diseno');
      if (targetElement) {
        const navbar = document.querySelector('header');
        const navbarHeight = navbar ? navbar.offsetHeight : 0;
        
        window.scrollTo({
          top: targetElement.offsetTop - navbarHeight,
          behavior: 'smooth'
        });
      }
    });
  });
</script>
